// Problem Of The Day
// 22 September
// Max of min for every window size

import java.util.*;

class Solution {
    public ArrayList<Integer> maxOfMins(int[] arr) {
        int n = arr.length;

        int[] left = new int[n];
        int[] right = new int[n];

        // Step 1: Previous smaller elements
        ArrayDeque<Integer> dq = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (!dq.isEmpty() && arr[dq.peek()] >= arr[i]) {
                dq.pop();
            }
            left[i] = dq.isEmpty() ? -1 : dq.peek();
            dq.push(i);
        }

        // Step 2: Next smaller elements
        dq.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!dq.isEmpty() && arr[dq.peek()] >= arr[i]) {
                dq.pop();
            }
            right[i] = dq.isEmpty() ? n : dq.peek();
            dq.push(i);
        }

        // Step 3: Store max of minimums for each length
        int[] ans = new int[n + 1];  // index = window size
        for (int i = 0; i < n; i++) {
            int len = right[i] - left[i] - 1;
            ans[len] = Math.max(ans[len], arr[i]);
        }

        // Step 4: Fill remaining answers
        for (int i = n - 1; i >= 1; i--) {
            ans[i] = Math.max(ans[i], ans[i + 1]);
        }

        // Step 5: Build output
        ArrayList<Integer> res = new ArrayList<>(n);
        for (int i = 1; i <= n; i++) {
            res.add(ans[i]);
        }
        return res;
    }
}
